    %% Set Build directory and Generated Code directory
    % https://www.mathworks.com/help/simulink/slref/simulink.filegencontrol.html
    codeFolder = fullfile('generatedCode');
    BusSerialize.setGeneratedCodePath(codeFolder);
    
    % Simulink CacheFolder and CodeGenFolder
    buildFolder = fullfile('buildFolder');

    try
        % Reset to the CacheFolder and CodeGenFolder parameters by the Simulink preferences
        Simulink.fileGenControl('reset');
        % Specify root folders in which to put files generated by diagram updates and model builds
        Simulink.fileGenControl('set', ...
            'CacheFolder', buildFolder, ...
            'CodeGenFolder', buildFolder, ...
            'createDir', true);
    catch
        warning('Unable to set CacheFolder and CodeGenFolder');
    end

    %% define some enumerators
    states = {
        'Start', ...
        'Stop', ...
        };
    BusSerialize.defineEnum('state', states, 'description', ...
        'List of sone enumerators');
    clear states;
    BusSerialize.updateCodeForEnums({'state'});

     %% Define some nested buses
    import BusSerialize.SignalSpec;

    TD.running        = SignalSpec.ToggleSwitch(false);
    TD.timeMS         = SignalSpec.Param(uint32(0), 'ms'); % time from the simulink started
    TD.timeSDN        = SignalSpec.Param(0, 'sdn');        % days since the epoch (the MATLAB default)
     % simulink time of state entries (e.g. Stateflow states)
    [~, e] = enumeration('state');
    for i = 1:numel(e)
        TE.(e{i}) = SignalSpec.Param(uint32(0), 'ms');
    end
    BusSerialize.createBusBaseWorkspace('stateTimeBus', TE);
    TD.stateTimeMS    = SignalSpec.Bus('stateTimeBus');
    clear i e TE;
    % Analog part (e.g. timeseries over the course of a trial)
    TDA.mouseUpdate   = SignalSpec.Analog(int8(-1));
    TDA.X             = SignalSpec.Analog(0, 'va');
    TDA.Y             = SignalSpec.Analog(0, 'va');
    BusSerialize.createBusBaseWorkspace('AnalogBus', TDA);
    clear TDA;
    TD.analog         = SignalSpec.Bus('AnalogBus');
    % Variable length
    maxLength = 20;
    TD.stateQueue     = SignalSpec.EventEnumQueueVariable('state', maxLength);
    maxMsgLength = 65000;
    TD.msg            = SignalSpec.ParamVectorVariable(zeros(0, 1, 'uint8'), maxMsgLength);
    TD.someVariableData = SignalSpec.ParamVectorVariable(zeros(0, 1, 'uint16'), 1000);
    BusSerialize.createBusBaseWorkspace('SMTestBus', TD);
    clear TD;
    BusSerialize.updateCodeForBuses('SMTestBus');

    h = load_system('SMTestBusModel');
    % temp warning fix
    set_param('SMTestBusModel','UnitsInconsistencyMsg','none');